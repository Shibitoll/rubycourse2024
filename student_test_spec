require 'minitest/autorun'
require 'minitest/spec'
require 'minitest/reporters'
require_relative 'homework1'

unless ENV['RM_INFO']
  require 'minitest/reporters'
Minitest::Reporters.use! [
                           Minitest::Reporters::SpecReporter.new,
                           Minitest::Reporters::HtmlReporter.new(
                             reports_dir: 'test/reports_2',
                             report_filename: 'test_results_spec.html',
                             add_timestamp: true
                           )
                         ]
  end

describe Student do
  before do
    Student.class_variable_set(:@@students, [])
    Student.add_student('Bondariev', 'Ivan', '2005-07-05')
    Student.add_student('Doe', 'Jane', '1998-03-12')
    Student.add_student('Brown', 'Charlie', '2001-07-23')
  end

  it 'adds a student successfully' do
    Student.add_student('Aliev', 'Alex', '1999-08-10')
    _(Student.students.size).must_equal 4
  end

  it 'raises an error when adding a duplicate student' do
    proc {
      Student.add_student('Bondariev', 'Ivan', '2005-07-05')
    }.must_raise ArgumentError
  end

  it 'removes an existing student' do
    Student.remove_student('Doe', 'Jane', '1998-03-12')
    _(Student.students.size).must_equal 2
  end

  it 'raises an error when trying to remove a nonexistent student' do
    proc {
      Student.remove_student('Wiliam', 'John', '2020-01-01')
    }.must_raise ArgumentError
  end

  it 'calculates the correct age for Ivan' do
    ivan = Student.students.find { |student| student.surname == 'Bondariev' && student.name == 'Ivan' }
    age = ivan.calculate_age
    expected_age = Date.today.year - 2005 - (Date.today < Date.new(Date.today.year, 7, 5) ? 1 : 0)
    _(age).must_equal expected_age
  end

  it 'raises an error for a nonexistent student when calculating age' do
    nonexistent_student = Student.new('Wiliam', 'John', '2020-01-01') # just an example
    proc {
      nonexistent_student.calculate_age
    }.must_raise ArgumentError
  end

  it 'returns students of a specific age' do
    students = Student.get_students_by_age(23)
    _(students).wont_be_empty
  end

  it 'raises an error when no students match the age' do
    proc {
      Student.get_students_by_age(100)
    }.must_raise ArgumentError
  end

  it 'returns students with the specified name' do
    students = Student.get_students_by_name('Jane')
    _(students).wont_be_empty
  end

  it 'raises an error when no students match the name' do
    proc {
      Student.get_students_by_name('Wiliam')
    }.must_raise ArgumentError
  end
end
